buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'web'
version '1.0'

sourceCompatibility = 1.8

mainClassName = 'com.core.web.Main'

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile("org.springframework.boot:spring-boot-devtools")

    runtime('org.postgresql:postgresql')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly "org.projectlombok:lombok:1.16.16"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/*
def webappDir = "$projectDir/src/main/webapp"

task installAngular(type: Exec) {
    workingDir webappDir
    inputs.dir webappDir
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task buildWebApp(type: Exec) {
    dependsOn installAngular

    workingDir webappDir
    inputs.dir webappDir

    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP

    //on windows:
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "ng", "run-script", "build"
    }

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

jar {
    sourceSets {
        main {
            resources {
                srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
            }
        }
    }
}

war {
    dependsOn buildWebApp
    webAppDirName = "$webappDir/dist/static"
}

processResources {
    // TODO: enable when in production mode
    // dependsOn buildWebApp
}
*/